nextflow_pipeline {

    name "Integration Tests of adjusting gm_thresholds parameter for clustering"
    script "main.nf"

    test("Test fail pipeline if null threshold set") {
        tag "pipeline_failure_null_threshold"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_thresholds = null
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("ERROR ~ --gm_thresholds null: Cannot pass null or empty string")
        }
    }

    test("Test fail pipeline if empty threshold set") {
        tag "pipeline_failure_no_threshold"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_thresholds = ""
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("ERROR ~ --gm_thresholds : Cannot pass null or empty string")
        }
    }

    test("Test pipeline with single threshold set to 0") {
        tag "pipeline_thresh_0"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_thresholds = "0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hamming.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hamming.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/clusters.text")
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree_hamming.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hamming_thresh_0.txt")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text == expected_clusters.text
        }
    }

    test("Test pipeline with single threshold set to 1") {
        tag "pipeline_thresh_1"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_thresholds = "1"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hamming.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hamming.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/clusters.text")
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree_hamming.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hamming_thresh_1.txt")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text == expected_clusters.text
        }
    }

    test("Test pipeline with single threshold set to 2") {
        tag "pipeline_thresh_2"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_thresholds = "2"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hamming.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hamming.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_clusters = path("$launchDir/results/clusters/clusters.text")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hamming_thresh_2.txt")
            assert actual_clusters.text == expected_clusters.text
        }
    }

    test("Test pipeline with single threshold set to 3") {
        tag "pipeline_thresh_3"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_thresholds = "3"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hamming.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hamming.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_clusters = path("$launchDir/results/clusters/clusters.text")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hamming_thresh_3.txt")
            assert actual_clusters.text == expected_clusters.text
        }
    }

    test("Test pipeline with threshold set to 1,0") {
        tag "pipeline_thresh_1.0"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_thresholds = "1,0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hamming.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hamming.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_clusters = path("$launchDir/results/clusters/clusters.text")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hamming_thresh_1.0.txt")
            assert actual_clusters.text == expected_clusters.text
        }
    }
}