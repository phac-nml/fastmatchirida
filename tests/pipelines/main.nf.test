nextflow_pipeline {

    name "Integration Tests of Allele Clustering"
    script "main.nf"

    test("Small-scale test of full pipeline") {
        tag "pipeline_simple"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet1.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "50,20,0"

                metadata_1_header = "myheader_1"
                metadata_2_header = "myheader_2"
                metadata_3_header = "myheader_3"
                metadata_4_header = "myheader_4"
                metadata_5_header = "myheader_5"
                metadata_6_header = "myheader_6"
                metadata_7_header = "myheader_7"
                metadata_8_header = "myheader_8"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check ID correction:
            def sampleA_report = path("$launchDir/results/input/sampleA_error_report.csv")
            def sampleB_report = path("$launchDir/results/input/sampleB_error_report.csv")
            def sampleC_report = path("$launchDir/results/input/sampleC_error_report.csv")
            assert sampleA_report.exists() == false
            assert sampleB_report.exists() == false
            assert sampleC_report.exists() == false

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/locidex.merge.profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile1.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.text")
            assert actual_distances.exists()
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists.tsv")
            assert actual_distances.text == expected_distances.text

        }
    }

    test("Small-scale test of full pipeline hamming distances") {
        tag "pipeline_hamming"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_thresholds = "2,1,0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/locidex.merge.profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hamming.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hamming.tsv")
            assert actual_distances.text == expected_distances.text

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "distances/profile_dists.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.results.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.ref_profile.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.query_profile.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.allele_map.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "merged/locidex.merge.profile.tsv" }.size() == 1

            assert iridanext_samples.isEmpty()
            assert iridanext_metadata.isEmpty()
        }
    }

    test("Small-scale test of full pipeline hamming distances and single-linkage") {
        tag "pipeline_hamming_single_linkage"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_thresholds = "2,1,0"
                gm_method = "single"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/locidex.merge.profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hamming.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hamming.tsv")
            assert actual_distances.text == expected_distances.text

        }
    }

    test("Small-scale test of full pipeline hamming distances and complete-linkage") {
        tag "pipeline_hamming_complete_linkage"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_thresholds = "2,1,0"
                gm_method = "complete"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/locidex.merge.profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hamming.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hamming.tsv")
            assert actual_distances.text == expected_distances.text

        }
    }

    test("Ensure failure because of metadata tabs") {
        tag "pipeline_failure_metadata"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-tabs.csv"
                outdir = "results"
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("ERROR ~ ERROR: Validation of 'input' file failed!")
        }
    }

    test("Test succeed pipeline if valid delimiter set") {
        tag "pipeline_success_valid_delimiter"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_delimiter = '-'
            }
        }

        then {
            assert workflow.success
        }
    }

    test("Test fail pipeline if invalid delimiter set") {
        tag "pipeline_failure_invalid_delimiter"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_delimiter = ';'
            }
        }

        then {
            assert workflow.failed
            assert workflow.stderr.contains('* --gm_delimiter: string [;] does not match pattern ^[A-Fa-f0-9\\._-]+$ (;)')
        }
    }

    test("Full pipeline with no metadata") {
        tag "pipeline_no_metadata"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-no-metadata.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "50,20,0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/locidex.merge.profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile1.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.text")
            assert actual_distances.exists()
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists.tsv")
            assert actual_distances.text == expected_distances.text

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "distances/profile_dists.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.results.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.ref_profile.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.query_profile.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.allele_map.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "merged/locidex.merge.profile.tsv" }.size() == 1

            assert iridanext_samples.isEmpty()
            assert iridanext_metadata.isEmpty()
        }
    }

    test("Full pipeline with little metadata") {
        tag "pipeline_little_metadata"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-little-metadata.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "50,20,0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/locidex.merge.profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile1.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.text")
            assert actual_distances.exists()
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists.tsv")
            assert actual_distances.text == expected_distances.text


            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "distances/profile_dists.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.results.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.ref_profile.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.query_profile.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.allele_map.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "merged/locidex.merge.profile.tsv" }.size() == 1

            assert iridanext_samples.isEmpty()
            assert iridanext_metadata.isEmpty()
        }
    }

    test("Testing mismatched IDs") {
        // IDs in the sample sheet and IDs in the individual MLST JSON files will not match.
        // This tests the pipelines ability to handle and correct for this problem.

        tag "mismatch"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-mismatched-ids.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "50,20,0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check ID correction:
            def sampleA_report = path("$launchDir/results/input/sampleA_error_report.csv")
            def sampleB_report = path("$launchDir/results/input/sampleB_error_report.csv")
            def sampleC_report = path("$launchDir/results/input/sampleC_error_report.csv")
            assert sampleA_report.exists()
            assert sampleB_report.exists()
            assert sampleC_report.exists()
            assert sampleA_report.text.contains("sampleA,['sample1'],Query sampleA ID and JSON key in sample1.mlst.json DO NOT MATCH.")
            assert sampleB_report.text.contains("sampleB,['sample2'],Query sampleB ID and JSON key in sample2.mlst.json DO NOT MATCH.")
            assert sampleC_report.text.contains("sampleC,['sample3'],Query sampleC ID and JSON key in sample3.mlst.json DO NOT MATCH.")

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/locidex.merge.profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-mismatched-ids.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.text")
            assert actual_distances.exists()
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-mismatched-ids.tsv")
            assert actual_distances.text == expected_distances.text


            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "distances/profile_dists.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.results.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.ref_profile.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.query_profile.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.allele_map.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "merged/locidex.merge.profile.tsv" }.size() == 1

            assert iridanext_samples.isEmpty()
            assert iridanext_metadata.isEmpty()
        }
    }

    test("Testing partially mismatched IDs") {

        tag "partial_mismatch"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-partial-mismatched-ids.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "50,20,0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check ID correction:
            def sampleA_report = path("$launchDir/results/input/sampleA_error_report.csv")
            def sampleB_report = path("$launchDir/results/input/sampleB_error_report.csv")
            def sampleC_report = path("$launchDir/results/input/sampleC_error_report.csv")
            assert sampleA_report.exists()
            assert sampleB_report.exists()
            assert sampleC_report.exists() == false
            assert sampleA_report.text.contains("sampleA,['sample1'],Query sampleA ID and JSON key in sample1.mlst.json DO NOT MATCH.")
            assert sampleB_report.text.contains("sampleB,['sample2'],Query sampleB ID and JSON key in sample2.mlst.json DO NOT MATCH.")

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/locidex.merge.profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-partial-mismatched-ids.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.text")
            assert actual_distances.exists()
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-partial-mismatched-ids.tsv")
            assert actual_distances.text == expected_distances.text


            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "distances/profile_dists.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.results.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.ref_profile.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.query_profile.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.allele_map.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "merged/locidex.merge.profile.tsv" }.size() == 1

            assert iridanext_samples.isEmpty()
            assert iridanext_metadata.isEmpty()
        }
    }

    test("Testing sample_name column in samplesheet") {
        tag "add_sample_name"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-addsamplename.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "50,20,0"

                metadata_1_header = "metadata_1"
                metadata_2_header = "metadata_2"
                metadata_3_header = "metadata_3"
                metadata_4_header = "metadata_4"
                metadata_5_header = "metadata_5"
                metadata_6_header = "metadata_6"
                metadata_7_header = "metadata_7"
                metadata_8_header = "metadata_8"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check ID correction occured:
            def sample1_report = path("$launchDir/results/input/S_1_error_report.csv")
            def sample2_report = path("$launchDir/results/input/S2__error_report.csv")
            def sample3_report = path("$launchDir/results/input/S2__sample3_error_report.csv")
            assert sample1_report.exists() == true
            assert sample2_report.exists() == true
            assert sample3_report.exists() == true

            // compare IRIDA Next JSON output (should not be changed by adding sample_name column)
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "distances/profile_dists.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.results.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.ref_profile.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.query_profile.text" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.allele_map.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "merged/locidex.merge.profile.tsv" }.size() == 1

            assert iridanext_samples.isEmpty()
            assert iridanext_metadata.isEmpty()
        }
    }
}
