nextflow_pipeline {

    name "Integration Tests of Allele Clustering"
    script "main.nf"

    test("Small-scale test of full pipeline") {
        tag "pipeline"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet1.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "1,0.5,0"

                metadata_1_header = "myheader_1"
                metadata_2_header = "myheader_2"
                metadata_3_header = "myheader_3"
                metadata_4_header = "myheader_4"
                metadata_5_header = "myheader_5"
                metadata_6_header = "myheader_6"
                metadata_7_header = "myheader_7"
                metadata_8_header = "myheader_8"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile1.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/results.text")
            assert actual_distances.exists()
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/clusters.text")
            assert actual_tree.exists()
            assert actual_clusters.exists()
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters.txt")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text ==  expected_clusters.text

            // Check appended metadata is correct:
            def actual_metadata = path("$launchDir/results/append/clusters_and_metadata.tsv")
            assert actual_metadata.exists()
            def expected_metadata = path("$baseDir/tests/data/append/expected_clusters_and_metadata.tsv")
            assert actual_metadata.text == expected_metadata.text

            // Check that the ArborView output is created
            def actual_arborview = path("$launchDir/results/ArborView/clustered_data_arborview.html")
            assert actual_arborview.exists()
            assert actual_arborview.text.contains("id\\taddress\\tlevel_1\\tlevel_2\\tlevel_3\\tmyheader_1\\tmyheader_2\\tmyheader_3\\tmyheader_4\\tmyheader_5\\tmyheader_6\\tmyheader_7\\tmyheader_8\\nsample1\\t1.1.1\\t1\\t1\\t1\\t1.1\\t1.2\\t1.3\\t1.4\\t1.5\\t1.6\\t1.7\\t1.8\\nsample2\\t1.1.1\\t1\\t1\\t1\\t2.1\\t2.2\\t2.3\\t2.4\\t2.5\\t2.6\\t2.7\\t2.8\\nsample3\\t2.2.2\\t2\\t2\\t2\\t3.1\\t3.2\\t3.3\\t3.4\\t3.5\\t3.6\\t3.7\\t3.8\\n")

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples
        }
    }

    test("Small-scale test of full pipeline hamming distances") {
        tag "pipeline_hamming"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_thresholds = "2,1,0"

                metadata_1_header = "myheader_1"
                metadata_2_header = "myheader_2"
                metadata_3_header = "myheader_3"
                metadata_4_header = "myheader_4"
                metadata_5_header = "myheader_5"
                metadata_6_header = "myheader_6"
                metadata_7_header = "myheader_7"
                metadata_8_header = "myheader_8"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hamming.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hamming.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/clusters.text")
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree_hamming.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hamming.txt")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text ==  expected_clusters.text

            // Check appended metadata is correct:
            def actual_metadata = path("$launchDir/results/append/clusters_and_metadata.tsv")
            def expected_metadata = path("$baseDir/tests/data/append/expected_clusters_and_metadata_hamming.tsv")
            assert actual_metadata.text == expected_metadata.text

            // Check that the ArborView output is created
            def actual_arborview = path("$launchDir/results/ArborView/clustered_data_arborview.html")
            assert actual_arborview.text.contains("id\\taddress\\tlevel_1\\tlevel_2\\tlevel_3\\tmyheader_1\\tmyheader_2\\tmyheader_3\\tmyheader_4\\tmyheader_5\\tmyheader_6\\tmyheader_7\\tmyheader_8\\nsample1\\t1.1.1\\t1\\t1\\t1\\t\\t\\t\\t\\t\\t\\t\\t\\nsample2\\t1.1.2\\t1\\t1\\t2\\t\\t\\t\\t\\t\\t\\t\\t\\nsample3\\t2.2.3\\t2\\t2\\t3\\t\\t\\t\\t\\t\\t\\t\\t\\n")

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples
        }
    }

    test("Full pipeline hashes and missing data") {
        tag "pipeline_hashes_missing"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash-missing.csv"
                outdir = "results"

                gm_thresholds = "1"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hash-missing.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hash-missing.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            //def actual_tree = path("$launchDir/results/clusters/tree.nwk")
            //def actual_clusters = path("$launchDir/results/clusters/clusters.text")
            //def expected_tree = path("$baseDir/tests/data/clusters/expected_tree_hamming.nwk")
            //def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hamming.txt")
            //assert actual_tree.text == expected_tree.text
            //assert actual_clusters.text ==  expected_clusters.text
        }
    }

    test("Ensure failure because of metadata tabs") {
        tag "pipeline"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-tabs.csv"
                outdir = "results"
            }
        }

        then {
            assert workflow.success == false
        }
    }

    test("Full pipeline with no metadata") {
        tag "pipeline"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-no-metadata.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "1,0.5,0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile1.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/results.text")
            assert actual_distances.exists()
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/clusters.text")
            assert actual_tree.exists()
            assert actual_clusters.exists()
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters.txt")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text ==  expected_clusters.text

            // Check appended metadata is correct:
            def actual_metadata = path("$launchDir/results/append/clusters_and_metadata.tsv")
            assert actual_metadata.exists()
            def expected_metadata = path("$baseDir/tests/data/append/expected_clusters_and_metadata_no_metadata.tsv")
            assert actual_metadata.text == expected_metadata.text

            // Check that the ArborView output is created
            def actual_arborview = path("$launchDir/results/ArborView/clustered_data_arborview.html")
            assert actual_arborview.exists()
            assert actual_arborview.text.contains("id\\taddress\\tlevel_1\\tlevel_2\\tlevel_3\\tmetadata_1\\tmetadata_2\\tmetadata_3\\tmetadata_4\\tmetadata_5\\tmetadata_6\\tmetadata_7\\tmetadata_8\\nsample1\\t1.1.1\\t1\\t1\\t1\\t\\t\\t\\t\\t\\t\\t\\t\\nsample2\\t1.1.1\\t1\\t1\\t1\\t\\t\\t\\t\\t\\t\\t\\t\\nsample3\\t2.2.2\\t2\\t2\\t2\\t\\t\\t\\t\\t\\t\\t\\t\\n")

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples
        }
    }

    test("Full pipeline with little metadata") {
        tag "pipeline"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-little-metadata.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "1,0.5,0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/merged/profile.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile1.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/results.text")
            assert actual_distances.exists()
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/clusters.text")
            assert actual_tree.exists()
            assert actual_clusters.exists()
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters.txt")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text ==  expected_clusters.text

            // Check appended metadata is correct:
            def actual_metadata = path("$launchDir/results/append/clusters_and_metadata.tsv")
            assert actual_metadata.exists()
            def expected_metadata = path("$baseDir/tests/data/append/expected_clusters_and_metadata_little_metadata.tsv")
            assert actual_metadata.text == expected_metadata.text

            // Check that the ArborView output is created
            def actual_arborview = path("$launchDir/results/ArborView/clustered_data_arborview.html")
            assert actual_arborview.exists()
            assert actual_arborview.text.contains("id\\taddress\\tlevel_1\\tlevel_2\\tlevel_3\\tmetadata_1\\tmetadata_2\\tmetadata_3\\tmetadata_4\\tmetadata_5\\tmetadata_6\\tmetadata_7\\tmetadata_8\\nsample1\\t1.1.1\\t1\\t1\\t1\\t\\t\\t\\t1.4\\t\\t\\t\\t\\nsample2\\t1.1.1\\t1\\t1\\t1\\t\\t\\t\\t\\t\\t\\t\\t\\nsample3\\t2.2.2\\t2\\t2\\t2\\t3.1\\t3.2\\t\\t\\t\\t\\t\\t3.8\\n")

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples
        }
    }
}
