nextflow_pipeline {

    name "FastMatch Integration Testing"
    script "main.nf"

    test("Basic test of pipeline") {
        tag "pipeline_basic"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/basic.csv"
                outdir = "results"

                pd_distm = "hamming"
                threshold = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Appended Results
            def appended = path("$launchDir/results/append/distances_and_metadata.tsv")
            assert appended.exists()

            assert appended.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id\trelated_specimen_relationship_type\tcalc_source_type\tgeo_loc_name_country\tgeo_loc_name_state_province_territory\tpnc_analysis_date\tcnphi_post_date\tcalc_earliest_date\tfastmatch_result")
            assert appended.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert appended.text.contains("sample1\tsample1\tsample3\tsample3\t1")
            assert appended.text.contains("sample1\tsample1\tsample4\tsample4\t1")
            assert appended.text.contains("sample1\tsample1\tsample2\tsample2\t1")
            assert appended.text.contains("sample1\tsample1\tsample5\tsample5\t2")
            assert appended.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert appended.text.contains("sample2\tsample2\tsample1\tsample1\t1")
            assert appended.text.contains("sample2\tsample2\tsample3\tsample3\t2")
            assert appended.text.contains("sample2\tsample2\tsample4\tsample4\t2")
            assert appended.text.contains("sample2\tsample2\tsample5\tsample5\t3")

            // Check Locidex Merged Query
            def merged_query = path("$launchDir/results/locidex/concat/query/profile_concat_query.tsv")
            assert merged_query.exists()

            assert merged_query.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5")
            assert merged_query.text.contains("sample1\t1\t1\t1\t1\t1")
            assert merged_query.text.contains("sample2\t1\t2\t1\t1\t1")

            // Check Locidex Merged Reference
            def merged_reference = path("$launchDir/results/locidex/concat/reference/profile_concat_ref.tsv")
            assert merged_reference.exists()

            assert merged_reference.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5\n")
            assert merged_reference.text.contains("sample3\t1\t1\t3\t1\t1\n")
            assert merged_reference.text.contains("sample4\t1\t1\t1\t4\t1\n")
            assert merged_reference.text.contains("sample5\t1\t1\t1\t5\t5\n")
            assert merged_reference.text.contains("sample1\t1\t1\t1\t1\t1\n")
            assert merged_reference.text.contains("sample2\t1\t2\t1\t1\t1\n")

            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id\trelated_specimen_relationship_type\tcalc_source_type\tgeo_loc_name_country\tgeo_loc_name_state_province_territory\tpnc_analysis_date\tcnphi_post_date\tcalc_earliest_date\tfastmatch_result")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample3\tsample3\t1")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample4\tsample4\t1")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample2\tsample2\t1")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample1\tsample1\t1")

            // Check Distances
            def distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert distances.exists()

            assert distances.text.contains("query_id\tref_id\tdist")
            assert distances.text.contains("sample1\tsample1\t0")
            assert distances.text.contains("sample1\tsample3\t1")
            assert distances.text.contains("sample1\tsample4\t1")
            assert distances.text.contains("sample1\tsample2\t1")
            assert distances.text.contains("sample1\tsample5\t2")
            assert distances.text.contains("sample2\tsample2\t0")
            assert distances.text.contains("sample2\tsample1\t1")
            assert distances.text.contains("sample2\tsample3\t2")
            assert distances.text.contains("sample2\tsample4\t2")
            assert distances.text.contains("sample2\tsample5\t3")
        }
    }

    test("Basic test of pipeline with higher threshold") {
        tag "pipeline_basic_higher_threshold"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/basic.csv"
                outdir = "results"

                pd_distm = "hamming"
                threshold = 3
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Appended Results
            def appended = path("$launchDir/results/append/distances_and_metadata.tsv")
            assert appended.exists()

            assert appended.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert appended.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert appended.text.contains("sample1\tsample1\tsample3\tsample3\t1")
            assert appended.text.contains("sample1\tsample1\tsample4\tsample4\t1")
            assert appended.text.contains("sample1\tsample1\tsample2\tsample2\t1")
            assert appended.text.contains("sample1\tsample1\tsample5\tsample5\t2")
            assert appended.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert appended.text.contains("sample2\tsample2\tsample1\tsample1\t1")
            assert appended.text.contains("sample2\tsample2\tsample3\tsample3\t2")
            assert appended.text.contains("sample2\tsample2\tsample4\tsample4\t2")
            assert appended.text.contains("sample2\tsample2\tsample5\tsample5\t3")

            // Check Locidex Merged Query
            def merged_query = path("$launchDir/results/locidex/concat/query/profile_concat_query.tsv")
            assert merged_query.exists()

            assert merged_query.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5")
            assert merged_query.text.contains("sample1\t1\t1\t1\t1\t1")
            assert merged_query.text.contains("sample2\t1\t2\t1\t1\t1")

            // Check Locidex Merged Reference
            def merged_reference = path("$launchDir/results/locidex/concat/reference/profile_concat_ref.tsv")
            assert merged_reference.exists()

            assert merged_reference.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5\n")
            assert merged_reference.text.contains("sample3\t1\t1\t3\t1\t1\n")
            assert merged_reference.text.contains("sample4\t1\t1\t1\t4\t1\n")
            assert merged_reference.text.contains("sample5\t1\t1\t1\t5\t5\n")
            assert merged_reference.text.contains("sample1\t1\t1\t1\t1\t1\n")
            assert merged_reference.text.contains("sample2\t1\t2\t1\t1\t1\n")

            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample3\tsample3\t1")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample4\tsample4\t1")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample2\tsample2\t1")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample5\tsample5\t2")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample1\tsample1\t1")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample3\tsample3\t2")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample4\tsample4\t2")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample5\tsample5\t3")

            // Check Distances
            def distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert distances.exists()

            assert distances.text.contains("query_id\tref_id\tdist")
            assert distances.text.contains("sample1\tsample1\t0")
            assert distances.text.contains("sample1\tsample3\t1")
            assert distances.text.contains("sample1\tsample4\t1")
            assert distances.text.contains("sample1\tsample2\t1")
            assert distances.text.contains("sample1\tsample5\t2")
            assert distances.text.contains("sample2\tsample2\t0")
            assert distances.text.contains("sample2\tsample1\t1")
            assert distances.text.contains("sample2\tsample3\t2")
            assert distances.text.contains("sample2\tsample4\t2")
            assert distances.text.contains("sample2\tsample5\t3")
        }
    }

    test("Sample ID and MLST JSON ID mismatch") {
        tag "pipeline_id_mismatch"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/mlst_id_mismatch.csv"
                outdir = "results"

                pd_distm = "hamming"
                threshold = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check ID Fixing
            def sample1_error_report = path("$launchDir/results/locidex/merge/query/MLST_error_report_1.csv")
            assert sample1_error_report.exists()

            assert sample1_error_report.text.contains("sample1,['sample1mismatch'],sample1 ID and JSON key in sample1_id_mismatch.mlst.json DO NOT MATCH. The 'sample1mismatch' key in sample1_id_mismatch.mlst.json has been forcefully changed to 'sample1': User should manually check input files to ensure correctness.")

            // Check Appended Results
            def appended = path("$launchDir/results/append/distances_and_metadata.tsv")
            assert appended.exists()

            assert appended.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert appended.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert appended.text.contains("sample1\tsample1\tsample3\tsample3\t1")
            assert appended.text.contains("sample1\tsample1\tsample4\tsample4\t1")
            assert appended.text.contains("sample1\tsample1\tsample2\tsample2\t1")
            assert appended.text.contains("sample1\tsample1\tsample5\tsample5\t2")
            assert appended.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert appended.text.contains("sample2\tsample2\tsample1\tsample1\t1")
            assert appended.text.contains("sample2\tsample2\tsample3\tsample3\t2")
            assert appended.text.contains("sample2\tsample2\tsample4\tsample4\t2")
            assert appended.text.contains("sample2\tsample2\tsample5\tsample5\t3")

            // Check Locidex Merged Query
            def merged_query = path("$launchDir/results/locidex/concat/query/profile_concat_query.tsv")
            assert merged_query.exists()

            assert merged_query.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5")
            assert merged_query.text.contains("sample1\t1\t1\t1\t1\t1")
            assert merged_query.text.contains("sample2\t1\t2\t1\t1\t1")

            // Check Locidex Merged Reference
            def merged_reference = path("$launchDir/results/locidex/concat/reference/profile_concat_ref.tsv")
            assert merged_reference.exists()

            assert merged_reference.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5\n")
            assert merged_reference.text.contains("sample3\t1\t1\t3\t1\t1\n")
            assert merged_reference.text.contains("sample4\t1\t1\t1\t4\t1\n")
            assert merged_reference.text.contains("sample5\t1\t1\t1\t5\t5\n")
            assert merged_reference.text.contains("sample1\t1\t1\t1\t1\t1\n")
            assert merged_reference.text.contains("sample2\t1\t2\t1\t1\t1\n")

            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample3\tsample3\t1")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample4\tsample4\t1")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample2\tsample2\t1")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample1\tsample1\t1")

            // Check Distances
            def distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert distances.exists()

            assert distances.text.contains("query_id\tref_id\tdist")
            assert distances.text.contains("sample1\tsample1\t0")
            assert distances.text.contains("sample1\tsample3\t1")
            assert distances.text.contains("sample1\tsample4\t1")
            assert distances.text.contains("sample1\tsample2\t1")
            assert distances.text.contains("sample1\tsample5\t2")
            assert distances.text.contains("sample2\tsample2\t0")
            assert distances.text.contains("sample2\tsample1\t1")
            assert distances.text.contains("sample2\tsample3\t2")
            assert distances.text.contains("sample2\tsample4\t2")
            assert distances.text.contains("sample2\tsample5\t3")
        }
    }

    test("Metadata test") {
        tag "pipeline_metadata"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/metadata.csv"
                outdir = "results"

                pd_distm = "hamming"
                threshold = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Appended Results
            def appended = path("$launchDir/results/append/distances_and_metadata.tsv")
            assert appended.exists()

            assert appended.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id\trelated_specimen_relationship_type\tcalc_source_type\tgeo_loc_name_country\tgeo_loc_name_state_province_territory\tpnc_analysis_date\tcnphi_post_date\tcalc_earliest_date\tfastmatch_result")
            assert appended.text.contains("sample1\tsample1\tsample1\tsample1\t0\ts1m1\ts1m2\ts1m3\ts1m4\ts1m5\ts1m6\ts1m7\ts1m8\ts1m9\ts1m10\ts1m11\ts1m12\ts1m13\ts1m14\ts1m15\ts1m16")
            assert appended.text.contains("sample1\tsample1\tsample3\tsample3\t1\ts3m1\ts3m2\ts3m3\ts3m4\ts3m5\ts3m6\ts3m7\ts3m8\ts3m9\ts3m10\ts3m11\ts3m12\ts3m13\ts3m14\ts3m15\ts3m16")
            assert appended.text.contains("sample1\tsample1\tsample4\tsample4\t1\ts4m1\ts4m2\ts4m3\ts4m4\ts4m5\ts4m6\ts4m7\ts4m8\ts4m9\ts4m10\ts4m11\ts4m12\ts4m13\ts4m14\ts4m15\ts4m16")
            assert appended.text.contains("sample1\tsample1\tsample2\tsample2\t1\ts2m1\ts2m2\ts2m3\ts2m4\ts2m5\ts2m6\ts2m7\ts2m8\ts2m9\ts2m10\ts2m11\ts2m12\ts2m13\ts2m14\ts2m15\ts2m16")
            assert appended.text.contains("sample1\tsample1\tsample5\tsample5\t2\ts5m1\ts5m2\ts5m3\ts5m4\ts5m5\ts5m6\ts5m7\ts5m8\ts5m9\ts5m10\ts5m11\ts5m12\ts5m13\ts5m14\ts5m15\ts5m16")
            assert appended.text.contains("sample2\tsample2\tsample2\tsample2\t0\ts2m1\ts2m2\ts2m3\ts2m4\ts2m5\ts2m6\ts2m7\ts2m8\ts2m9\ts2m10\ts2m11\ts2m12\ts2m13\ts2m14\ts2m15\ts2m16")
            assert appended.text.contains("sample2\tsample2\tsample1\tsample1\t1\ts1m1\ts1m2\ts1m3\ts1m4\ts1m5\ts1m6\ts1m7\ts1m8\ts1m9\ts1m10\ts1m11\ts1m12\ts1m13\ts1m14\ts1m15\ts1m16")
            assert appended.text.contains("sample2\tsample2\tsample3\tsample3\t2\ts3m1\ts3m2\ts3m3\ts3m4\ts3m5\ts3m6\ts3m7\ts3m8\ts3m9\ts3m10\ts3m11\ts3m12\ts3m13\ts3m14\ts3m15\ts3m16")
            assert appended.text.contains("sample2\tsample2\tsample4\tsample4\t2\ts4m1\ts4m2\ts4m3\ts4m4\ts4m5\ts4m6\ts4m7\ts4m8\ts4m9\ts4m10\ts4m11\ts4m12\ts4m13\ts4m14\ts4m15\ts4m16")
            assert appended.text.contains("sample2\tsample2\tsample5\tsample5\t3\ts5m1\ts5m2\ts5m3\ts5m4\ts5m5\ts5m6\ts5m7\ts5m8\ts5m9\ts5m10\ts5m11\ts5m12\ts5m13\ts5m14\ts5m15\ts5m16")

            // Check Locidex Merged Query
            def merged_query = path("$launchDir/results/locidex/concat/query/profile_concat_query.tsv")
            assert merged_query.exists()

            assert merged_query.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5")
            assert merged_query.text.contains("sample1\t1\t1\t1\t1\t1")
            assert merged_query.text.contains("sample2\t1\t2\t1\t1\t1")

            // Check Locidex Merged Reference
            def merged_reference = path("$launchDir/results/locidex/concat/reference/profile_concat_ref.tsv")
            assert merged_reference.exists()

            assert merged_reference.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5\n")
            assert merged_reference.text.contains("sample3\t1\t1\t3\t1\t1\n")
            assert merged_reference.text.contains("sample4\t1\t1\t1\t4\t1\n")
            assert merged_reference.text.contains("sample5\t1\t1\t1\t5\t5\n")
            assert merged_reference.text.contains("sample1\t1\t1\t1\t1\t1\n")
            assert merged_reference.text.contains("sample2\t1\t2\t1\t1\t1\n")

            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id\trelated_specimen_relationship_type\tcalc_source_type\tgeo_loc_name_country\tgeo_loc_name_state_province_territory\tpnc_analysis_date\tcnphi_post_date\tcalc_earliest_date\tfastmatch_result")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample1\tsample1\t0\ts1m1\ts1m2\ts1m3\ts1m4\ts1m5\ts1m6\ts1m7\ts1m8\ts1m9\ts1m10\ts1m11\ts1m12\ts1m13\ts1m14\ts1m15\ts1m16")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample3\tsample3\t1\ts3m1\ts3m2\ts3m3\ts3m4\ts3m5\ts3m6\ts3m7\ts3m8\ts3m9\ts3m10\ts3m11\ts3m12\ts3m13\ts3m14\ts3m15\ts3m16")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample4\tsample4\t1\ts4m1\ts4m2\ts4m3\ts4m4\ts4m5\ts4m6\ts4m7\ts4m8\ts4m9\ts4m10\ts4m11\ts4m12\ts4m13\ts4m14\ts4m15\ts4m16")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample2\tsample2\t1\ts2m1\ts2m2\ts2m3\ts2m4\ts2m5\ts2m6\ts2m7\ts2m8\ts2m9\ts2m10\ts2m11\ts2m12\ts2m13\ts2m14\ts2m15\ts2m16")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample2\tsample2\t0\ts2m1\ts2m2\ts2m3\ts2m4\ts2m5\ts2m6\ts2m7\ts2m8\ts2m9\ts2m10\ts2m11\ts2m12\ts2m13\ts2m14\ts2m15\ts2m16")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample1\tsample1\t1\ts1m1\ts1m2\ts1m3\ts1m4\ts1m5\ts1m6\ts1m7\ts1m8\ts1m9\ts1m10\ts1m11\ts1m12\ts1m13\ts1m14\ts1m15\ts1m16")

            // Check Distances
            def distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert distances.exists()

            assert distances.text.contains("query_id\tref_id\tdist")
            assert distances.text.contains("sample1\tsample1\t0")
            assert distances.text.contains("sample1\tsample3\t1")
            assert distances.text.contains("sample1\tsample4\t1")
            assert distances.text.contains("sample1\tsample2\t1")
            assert distances.text.contains("sample1\tsample5\t2")
            assert distances.text.contains("sample2\tsample2\t0")
            assert distances.text.contains("sample2\tsample1\t1")
            assert distances.text.contains("sample2\tsample3\t2")
            assert distances.text.contains("sample2\tsample4\t2")
            assert distances.text.contains("sample2\tsample5\t3")
        }
    }

    test("Basic test scaled distances") {
        tag "pipeline_scaled"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/basic.csv"
                outdir = "results"

                pd_distm = "scaled"
                threshold = 50.0
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Appended Results
            def appended = path("$launchDir/results/append/distances_and_metadata.tsv")
            assert appended.exists()

            assert appended.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert appended.text.contains("sample1\tsample1\tsample1\tsample1\t0.0")
            assert appended.text.contains("sample1\tsample1\tsample3\tsample3\t20.0")
            assert appended.text.contains("sample1\tsample1\tsample4\tsample4\t20.0")
            assert appended.text.contains("sample1\tsample1\tsample2\tsample2\t20.0")
            assert appended.text.contains("sample1\tsample1\tsample5\tsample5\t40.0")
            assert appended.text.contains("sample2\tsample2\tsample2\tsample2\t0.0")
            assert appended.text.contains("sample2\tsample2\tsample1\tsample1\t20.0")
            assert appended.text.contains("sample2\tsample2\tsample3\tsample3\t40.0")
            assert appended.text.contains("sample2\tsample2\tsample4\tsample4\t40.0")
            assert appended.text.contains("sample2\tsample2\tsample5\tsample5\t60.0")

            // Check Locidex Merged Query
            def merged_query = path("$launchDir/results/locidex/concat/query/profile_concat_query.tsv")
            assert merged_query.exists()

            assert merged_query.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5")
            assert merged_query.text.contains("sample1\t1\t1\t1\t1\t1")
            assert merged_query.text.contains("sample2\t1\t2\t1\t1\t1")

            // Check Locidex Merged Reference
            def merged_reference = path("$launchDir/results/locidex/concat/reference/profile_concat_ref.tsv")
            assert merged_reference.exists()

            assert merged_reference.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5\n")
            assert merged_reference.text.contains("sample3\t1\t1\t3\t1\t1\n")
            assert merged_reference.text.contains("sample4\t1\t1\t1\t4\t1\n")
            assert merged_reference.text.contains("sample5\t1\t1\t1\t5\t5\n")
            assert merged_reference.text.contains("sample1\t1\t1\t1\t1\t1\n")
            assert merged_reference.text.contains("sample2\t1\t2\t1\t1\t1\n")

            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample1\tsample1\t0.0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample3\tsample3\t20.0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample4\tsample4\t20.0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample2\tsample2\t20.0")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample1\tsample1\t20.0")

            // Check Distances
            def distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert distances.exists()

            assert distances.text.contains("query_id\tref_id\tdist")
            assert distances.text.contains("sample1\tsample1\t0.0")
            assert distances.text.contains("sample1\tsample3\t20.0")
            assert distances.text.contains("sample1\tsample4\t20.0")
            assert distances.text.contains("sample1\tsample2\t20.0")
            assert distances.text.contains("sample1\tsample5\t40.0")
            assert distances.text.contains("sample2\tsample2\t0.0")
            assert distances.text.contains("sample2\tsample1\t20.0")
            assert distances.text.contains("sample2\tsample3\t40.0")
            assert distances.text.contains("sample2\tsample4\t40.0")
            assert distances.text.contains("sample2\tsample5\t60.0")
        }
    }

    test("Count missing data as different") {
        tag "pipeline_missing_as_different"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/missing.csv"
                outdir = "results"

                pd_distm = "hamming"
                threshold = 2

                pd_count_missing = true
                pd_missing_threshold = 1.0
                pd_sample_quality_threshold = 1.0
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Appended Results
            def appended = path("$launchDir/results/append/distances_and_metadata.tsv")
            assert appended.exists()

            assert appended.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert appended.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert appended.text.contains("sample1\tsample1\tsample3\tsample3\t2")
            assert appended.text.contains("sample1\tsample1\tsample4\tsample4\t2")
            assert appended.text.contains("sample1\tsample1\tsample2\tsample2\t4")
            assert appended.text.contains("sample1\tsample1\tsample5\tsample5\t2")
            assert appended.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert appended.text.contains("sample2\tsample2\tsample1\tsample1\t4")
            assert appended.text.contains("sample2\tsample2\tsample3\tsample3\t3")
            assert appended.text.contains("sample2\tsample2\tsample4\tsample4\t3")
            assert appended.text.contains("sample2\tsample2\tsample5\tsample5\t4")

            // Check Locidex Merged Query
            def merged_query = path("$launchDir/results/locidex/concat/query/profile_concat_query.tsv")
            assert merged_query.exists()

            assert merged_query.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5")
            assert merged_query.text.contains("sample1\t1\t1\t1\t1\t1")
            assert merged_query.text.contains("sample2\t1\t2\t-\t-\t-")

            // Check Locidex Merged Reference
            def merged_reference = path("$launchDir/results/locidex/concat/reference/profile_concat_ref.tsv")
            assert merged_reference.exists()

            assert merged_reference.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5\n")
            assert merged_reference.text.contains("sample3\t1\t1\t3\t1\t-\n")
            assert merged_reference.text.contains("sample4\t1\t1\t-\t4\t1\n")
            assert merged_reference.text.contains("sample5\t1\t1\t1\t5\t5\n")
            assert merged_reference.text.contains("sample1\t1\t1\t1\t1\t1\n")
            assert merged_reference.text.contains("sample2\t1\t2\t-\t-\t-\n")

            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample5\tsample5\t2")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample3\tsample3\t2")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample4\tsample4\t2")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample2\tsample2\t0")

            // Check Distances
            def distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert distances.exists()

            assert distances.text.contains("query_id\tref_id\tdist")
            assert distances.text.contains("sample1\tsample1\t0")
            assert distances.text.contains("sample1\tsample3\t2")
            assert distances.text.contains("sample1\tsample4\t2")
            assert distances.text.contains("sample1\tsample2\t4")
            assert distances.text.contains("sample1\tsample5\t2")
            assert distances.text.contains("sample2\tsample2\t0")
            assert distances.text.contains("sample2\tsample1\t4")
            assert distances.text.contains("sample2\tsample3\t3")
            assert distances.text.contains("sample2\tsample4\t3")
            assert distances.text.contains("sample2\tsample5\t4")
        }
    }

    test("Don't count missing data as different with QA") {
        tag "pipeline_missing_as_not_different-QA"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/missing.csv"
                outdir = "results"

                pd_distm = "hamming"
                threshold = 2
                pd_skip = false
                pd_count_missing = false
                pd_missing_threshold = 0.0
                pd_sample_quality_threshold = 0.0
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check profile_dists QA steps ran
            assert path("$launchDir/results/distances/profile_dists.run.json").exists()
            def profile_dist_settings = path("$launchDir/results/distances/profile_dists.run.json").json
            assert profile_dist_settings.parameters.skip == false

            // Check Appended Results
            def appended = path("$launchDir/results/append/distances_and_metadata.tsv")
            assert appended.exists()

            assert appended.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert appended.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert appended.text.contains("sample1\tsample1\tsample3\tsample3\t0")
            assert appended.text.contains("sample1\tsample1\tsample4\tsample4\t0")
            assert appended.text.contains("sample1\tsample1\tsample2\tsample2\t1")
            assert appended.text.contains("sample1\tsample1\tsample5\tsample5\t0")
            assert appended.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert appended.text.contains("sample2\tsample2\tsample1\tsample1\t1")
            assert appended.text.contains("sample2\tsample2\tsample3\tsample3\t1")
            assert appended.text.contains("sample2\tsample2\tsample4\tsample4\t1")
            assert appended.text.contains("sample2\tsample2\tsample5\tsample5\t1")

            // Check Locidex Merged Query
            def merged_query = path("$launchDir/results/locidex/merge/query/profile_1.tsv")
            assert merged_query.exists()

            assert merged_query.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5")
            assert merged_query.text.contains("sample1\t1\t1\t1\t1\t1")
            assert merged_query.text.contains("sample2\t1\t2\t-\t-\t-")

            // Check Locidex Merged Reference
            def merged_reference = path("$launchDir/results/locidex/merge/ref/profile_1.tsv")
            assert merged_reference.exists()

            assert merged_reference.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5\n")
            assert merged_reference.text.contains("sample3\t1\t1\t3\t1\t-\n")
            assert merged_reference.text.contains("sample4\t1\t1\t-\t4\t1\n")
            assert merged_reference.text.contains("sample5\t1\t1\t1\t5\t5\n")
            assert merged_reference.text.contains("sample1\t1\t1\t1\t1\t1\n")
            assert merged_reference.text.contains("sample2\t1\t2\t-\t-\t-\n")

            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample3\tsample3\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample4\tsample4\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample2\tsample2\t1")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample5\tsample5\t0")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample1\tsample1\t1")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample3\tsample3\t1")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample4\tsample4\t1")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample5\tsample5\t1")

            // Check Distances
            def distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert distances.exists()

            assert distances.text.contains("query_id\tref_id\tdist")
            assert distances.text.contains("sample1\tsample1\t0")
            assert distances.text.contains("sample1\tsample3\t0")
            assert distances.text.contains("sample1\tsample4\t0")
            assert distances.text.contains("sample1\tsample2\t1")
            assert distances.text.contains("sample1\tsample5\t0")
            assert distances.text.contains("sample2\tsample2\t0")
            assert distances.text.contains("sample2\tsample1\t1")
            assert distances.text.contains("sample2\tsample3\t1")
            assert distances.text.contains("sample2\tsample4\t1")
            assert distances.text.contains("sample2\tsample5\t1")
        }
    }

    test("Don't count missing data as different") {
        tag "pipeline_missing_as_not_different"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/missing.csv"
                outdir = "results"

                pd_distm = "hamming"
                threshold = 2

                pd_count_missing = false
                pd_missing_threshold = 0.0
                pd_sample_quality_threshold = 0.0
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check profile_dists QA steps ran
            assert path("$launchDir/results/distances/profile_dists.run.json").exists()
            def profile_dist_settings = path("$launchDir/results/distances/profile_dists.run.json").json
            assert profile_dist_settings.parameters.skip == true

            // Check Appended Results
            def appended = path("$launchDir/results/append/distances_and_metadata.tsv")
            assert appended.exists()

            assert appended.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert appended.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert appended.text.contains("sample1\tsample1\tsample3\tsample3\t1")
            assert appended.text.contains("sample1\tsample1\tsample4\tsample4\t1")
            assert appended.text.contains("sample1\tsample1\tsample2\tsample2\t1")
            assert appended.text.contains("sample1\tsample1\tsample5\tsample5\t2")
            assert appended.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert appended.text.contains("sample2\tsample2\tsample1\tsample1\t1")
            assert appended.text.contains("sample2\tsample2\tsample3\tsample3\t1")
            assert appended.text.contains("sample2\tsample2\tsample4\tsample4\t1")
            assert appended.text.contains("sample2\tsample2\tsample5\tsample5\t1")

            // Check Locidex Merged Query
            def merged_query = path("$launchDir/results/locidex/merge/ref/profile_1.tsv")
            assert merged_query.exists()

            assert merged_query.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5")
            assert merged_query.text.contains("sample1\t1\t1\t1\t1\t1")
            assert merged_query.text.contains("sample2\t1\t2\t-\t-\t-")

            // Check Locidex Merged Reference
            def merged_reference = path("$launchDir/results/locidex/merge/ref/profile_1.tsv")
            assert merged_reference.exists()

            assert merged_reference.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5\n")
            assert merged_reference.text.contains("sample3\t1\t1\t3\t1\t-\n")
            assert merged_reference.text.contains("sample4\t1\t1\t-\t4\t1\n")
            assert merged_reference.text.contains("sample5\t1\t1\t1\t5\t5\n")
            assert merged_reference.text.contains("sample1\t1\t1\t1\t1\t1\n")
            assert merged_reference.text.contains("sample2\t1\t2\t-\t-\t-\n")

            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample3\tsample3\t1")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample4\tsample4\t1")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample5\tsample5\t2")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample3\tsample3\t1")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample4\tsample4\t1")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample5\tsample5\t1")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample1\tsample1\t1")

            // Check Distances
            def distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert distances.exists()

            assert distances.text.contains("query_id\tref_id\tdist")
            assert distances.text.contains("sample1\tsample1\t0")
            assert distances.text.contains("sample1\tsample3\t1")
            assert distances.text.contains("sample1\tsample4\t1")
            assert distances.text.contains("sample1\tsample2\t1")
            assert distances.text.contains("sample1\tsample5\t2")
            assert distances.text.contains("sample2\tsample2\t0")
            assert distances.text.contains("sample2\tsample1\t1")
            assert distances.text.contains("sample2\tsample3\t1")
            assert distances.text.contains("sample2\tsample4\t1")
            assert distances.text.contains("sample2\tsample5\t1")
        }
    }

    test("Testing pd_missing_threshold with QA") {
        tag "pipeline_pd_missing_threshold-QA"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/missing.csv"
                outdir = "results"

                pd_distm = "hamming"
                threshold = 2
                pd_skip = false
                pd_count_missing = true
                pd_missing_threshold = 0.25
                pd_sample_quality_threshold = 1.0
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check profile_dists QA steps ran
            assert path("$launchDir/results/distances/profile_dists.run.json").exists()
            def profile_dist_settings = path("$launchDir/results/distances/profile_dists.run.json").json
            assert profile_dist_settings.parameters.skip == false

            // Check Appended Results
            def appended = path("$launchDir/results/append/distances_and_metadata.tsv")
            assert appended.exists()

            assert appended.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert appended.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert appended.text.contains("sample1\tsample1\tsample3\tsample3\t0")
            assert appended.text.contains("sample1\tsample1\tsample4\tsample4\t0")
            assert appended.text.contains("sample1\tsample1\tsample2\tsample2\t1")
            assert appended.text.contains("sample1\tsample1\tsample5\tsample5\t0")
            assert appended.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert appended.text.contains("sample2\tsample2\tsample1\tsample1\t1")
            assert appended.text.contains("sample2\tsample2\tsample3\tsample3\t1")
            assert appended.text.contains("sample2\tsample2\tsample4\tsample4\t1")
            assert appended.text.contains("sample2\tsample2\tsample5\tsample5\t1")

            // Check Locidex Merged Query
            def merged_query = path("$launchDir/results/locidex/concat/query/profile_concat_query.tsv")
            assert merged_query.exists()

            assert merged_query.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5")
            assert merged_query.text.contains("sample1\t1\t1\t1\t1\t1")
            assert merged_query.text.contains("sample2\t1\t2\t-\t-\t-")

            // Check Locidex Merged Reference
            def merged_reference = path("$launchDir/results/locidex/concat/reference/profile_concat_ref.tsv")
            assert merged_reference.exists()

            assert merged_reference.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5\n")
            assert merged_reference.text.contains("sample3\t1\t1\t3\t1\t-\n")
            assert merged_reference.text.contains("sample4\t1\t1\t-\t4\t1\n")
            assert merged_reference.text.contains("sample5\t1\t1\t1\t5\t5\n")
            assert merged_reference.text.contains("sample1\t1\t1\t1\t1\t1\n")
            assert merged_reference.text.contains("sample2\t1\t2\t-\t-\t-\n")

            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample3\tsample3\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample4\tsample4\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample2\tsample2\t1")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample5\tsample5\t0")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample1\tsample1\t1")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample3\tsample3\t1")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample4\tsample4\t1")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample5\tsample5\t1")

            // Check Distances
            def distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert distances.exists()

            assert distances.text.contains("query_id\tref_id\tdist")
            assert distances.text.contains("sample1\tsample1\t0")
            assert distances.text.contains("sample1\tsample3\t0")
            assert distances.text.contains("sample1\tsample4\t0")
            assert distances.text.contains("sample1\tsample2\t1")
            assert distances.text.contains("sample1\tsample5\t0")
            assert distances.text.contains("sample2\tsample2\t0")
            assert distances.text.contains("sample2\tsample1\t1")
            assert distances.text.contains("sample2\tsample3\t1")
            assert distances.text.contains("sample2\tsample4\t1")
            assert distances.text.contains("sample2\tsample5\t1")
        }
    }

    test("Testing pd_missing_threshold") {
        tag "pipeline_pd_missing_threshold"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/missing.csv"
                outdir = "results"

                pd_distm = "hamming"
                threshold = 2

                pd_count_missing = true
                pd_missing_threshold = 0.25
                pd_sample_quality_threshold = 1.0
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check profile_dists QA steps ran
            assert path("$launchDir/results/distances/profile_dists.run.json").exists()
            def profile_dist_settings = path("$launchDir/results/distances/profile_dists.run.json").json
            assert profile_dist_settings.parameters.skip == true

            // Check Appended Results
            def appended = path("$launchDir/results/append/distances_and_metadata.tsv")
            assert appended.exists()

            assert appended.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert appended.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert appended.text.contains("sample1\tsample1\tsample3\tsample3\t2")
            assert appended.text.contains("sample1\tsample1\tsample4\tsample4\t2")
            assert appended.text.contains("sample1\tsample1\tsample2\tsample2\t4")
            assert appended.text.contains("sample1\tsample1\tsample5\tsample5\t2")
            assert appended.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert appended.text.contains("sample2\tsample2\tsample1\tsample1\t4")
            assert appended.text.contains("sample2\tsample2\tsample3\tsample3\t3")
            assert appended.text.contains("sample2\tsample2\tsample4\tsample4\t3")
            assert appended.text.contains("sample2\tsample2\tsample5\tsample5\t4")

            // Check Locidex Merged Query
            def merged_query = path("$launchDir/results/locidex/concat/query/profile_concat_query.tsv")
            assert merged_query.exists()

            assert merged_query.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5")
            assert merged_query.text.contains("sample1\t1\t1\t1\t1\t1")
            assert merged_query.text.contains("sample2\t1\t2\t-\t-\t-")

            // Check Locidex Merged Reference
            def merged_reference = path("$launchDir/results/locidex/concat/reference/profile_concat_ref.tsv")
            assert merged_reference.exists()

            assert merged_reference.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5\n")
            assert merged_reference.text.contains("sample3\t1\t1\t3\t1\t-\n")
            assert merged_reference.text.contains("sample4\t1\t1\t-\t4\t1\n")
            assert merged_reference.text.contains("sample5\t1\t1\t1\t5\t5\n")
            assert merged_reference.text.contains("sample1\t1\t1\t1\t1\t1\n")
            assert merged_reference.text.contains("sample2\t1\t2\t-\t-\t-\n")

            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample3\tsample3\t2")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample4\tsample4\t2")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample5\tsample5\t2")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample2\tsample2\t0")

            // Check Distances
            def distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert distances.exists()

            assert distances.text.contains("query_id\tref_id\tdist")
            assert distances.text.contains("sample1\tsample1\t0")
            assert distances.text.contains("sample1\tsample3\t2")
            assert distances.text.contains("sample1\tsample4\t2")
            assert distances.text.contains("sample1\tsample2\t4")
            assert distances.text.contains("sample1\tsample5\t2")
            assert distances.text.contains("sample2\tsample2\t0")
            assert distances.text.contains("sample2\tsample1\t4")
            assert distances.text.contains("sample2\tsample3\t3")
            assert distances.text.contains("sample2\tsample4\t3")
            assert distances.text.contains("sample2\tsample5\t4")
        }
    }

    test("Testing pd_sample_quality_threshold") {
        tag "pipeline_pd_sample_quality_threshold"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/missing.csv"
                outdir = "results"

                pd_distm = "hamming"
                threshold = 3

                pd_count_missing = true
                pd_missing_threshold = 1.0
                pd_sample_quality_threshold = 0.5
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Appended Results
            def appended = path("$launchDir/results/append/distances_and_metadata.tsv")
            assert appended.exists()

            assert appended.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert appended.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert appended.text.contains("sample1\tsample1\tsample3\tsample3\t2")
            assert appended.text.contains("sample1\tsample1\tsample4\tsample4\t2")
            assert appended.text.contains("sample1\tsample1\tsample5\tsample5\t2")

            // Check Locidex Merged Query
            def merged_query = path("$launchDir/results/locidex/concat/query/profile_concat_query.tsv")
            assert merged_query.exists()

            assert merged_query.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5")
            assert merged_query.text.contains("sample1\t1\t1\t1\t1\t1")
            assert merged_query.text.contains("sample2\t1\t2\t-\t-\t-")

            // Check Locidex Merged Reference
            def merged_reference = path("$launchDir/results/locidex/concat/reference/profile_concat_ref.tsv")
            assert merged_reference.exists()

            assert merged_reference.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5\n")
            assert merged_reference.text.contains("sample3\t1\t1\t3\t1\t-\n")
            assert merged_reference.text.contains("sample4\t1\t1\t-\t4\t1\n")
            assert merged_reference.text.contains("sample5\t1\t1\t1\t5\t5\n")
            assert merged_reference.text.contains("sample1\t1\t1\t1\t1\t1\n")
            assert merged_reference.text.contains("sample2\t1\t2\t-\t-\t-\n")

            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample5\tsample5\t2")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample3\tsample3\t2")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample4\tsample4\t2")

            // Check Distances
            def distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert distances.exists()

            assert distances.text.contains("query_id\tref_id\tdist")
            assert distances.text.contains("sample1\tsample1\t0")
            assert distances.text.contains("sample1\tsample3\t2")
            assert distances.text.contains("sample1\tsample4\t2")
            assert distances.text.contains("sample1\tsample5\t2")
        }
    }

    test("Select columns") {
        tag "pipeline_select_columns"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/missing.csv"
                outdir = "results"

                pd_distm = "hamming"
                threshold = 2

                pd_count_missing = true
                pd_missing_threshold = 1.0
                pd_sample_quality_threshold = 1.0
                pd_columns = "$baseDir/tests/data/columns.txt"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Appended Results
            def appended = path("$launchDir/results/append/distances_and_metadata.tsv")
            assert appended.exists()

            assert appended.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert appended.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert appended.text.contains("sample1\tsample1\tsample3\tsample3\t1")
            assert appended.text.contains("sample1\tsample1\tsample4\tsample4\t2")
            assert appended.text.contains("sample1\tsample1\tsample2\tsample2\t3")
            assert appended.text.contains("sample1\tsample1\tsample5\tsample5\t1")
            assert appended.text.contains("sample2\tsample2\tsample2\tsample2\t0")
            assert appended.text.contains("sample2\tsample2\tsample1\tsample1\t3")
            assert appended.text.contains("sample2\tsample2\tsample3\tsample3\t3")
            assert appended.text.contains("sample2\tsample2\tsample4\tsample4\t2")
            assert appended.text.contains("sample2\tsample2\tsample5\tsample5\t3")

            // Check Locidex Merged Query
            def merged_query = path("$launchDir/results/locidex/concat/query/profile_concat_query.tsv")
            assert merged_query.exists()

            assert merged_query.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5")
            assert merged_query.text.contains("sample1\t1\t1\t1\t1\t1")
            assert merged_query.text.contains("sample2\t1\t2\t-\t-\t-")

            // Check Locidex Merged Reference
            def merged_reference = path("$launchDir/results/locidex/concat/reference/profile_concat_ref.tsv")
            assert merged_reference.exists()

            assert merged_reference.text.contains("sample_id\tl1\tl2\tl3\tl4\tl5\n")
            assert merged_reference.text.contains("sample3\t1\t1\t3\t1\t-\n")
            assert merged_reference.text.contains("sample4\t1\t1\t-\t4\t1\n")
            assert merged_reference.text.contains("sample5\t1\t1\t1\t5\t5\n")
            assert merged_reference.text.contains("sample1\t1\t1\t1\t1\t1\n")
            assert merged_reference.text.contains("sample2\t1\t2\t-\t-\t-\n")

            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample5\tsample5\t1")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample3\tsample3\t1")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample4\tsample4\t2")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample2\tsample2\t0")

            // Check Distances
            def distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert distances.exists()

            assert distances.text.contains("query_id\tref_id\tdist")
            assert distances.text.contains("sample1\tsample1\t0")
            assert distances.text.contains("sample1\tsample3\t1")
            assert distances.text.contains("sample1\tsample4\t2")
            assert distances.text.contains("sample1\tsample2\t3")
            assert distances.text.contains("sample1\tsample5\t1")
            assert distances.text.contains("sample2\tsample2\t0")
            assert distances.text.contains("sample2\tsample1\t3")
            assert distances.text.contains("sample2\tsample3\t3")
            assert distances.text.contains("sample2\tsample4\t2")
            assert distances.text.contains("sample2\tsample5\t3")
        }
    }

    test("Testing when batch size is used for LOCIDEX_MERGE"){
        // Downstream of LOCIDEX_MERGE, the batch size is used to split the input into smaller chunks.
        // This is useful for large datasets to increase parallelism and reduce memory usage.

        tag "batch-size"

        when{
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-batchsize.csv"
                outdir = "results"
                batch_size = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check that LOCIDEX_MERGE was called with the correct batch size
            // Profiles for reference samples
            def lines1 = path("$launchDir/results/locidex/merge/ref/profile_1.tsv").readLines()
            assert lines1.contains("sample2\t1\t1\t1")
            def lines2 = path("$launchDir/results/locidex/merge/ref/profile_2.tsv").readLines()
            assert lines2.contains("sample3\t1\t1\t2")
            def lines3 = path("$launchDir/results/locidex/merge/ref/profile_3.tsv").readLines()
            assert lines3.contains("sampleQ\t1\t2\t1")
            def lines4 = path("$launchDir/results/locidex/merge/ref/profile_4.tsv").readLines()
            assert lines4.contains("sampleP\t1\t1\t1")
            // Profiles for query samples (same as the equivalent reference sample)
            def lines1_query = path("$launchDir/results/locidex/merge/query/profile_1.tsv").readLines()
            assert lines1_query == lines3

            def lines2_query = path("$launchDir/results/locidex/merge/query/profile_2.tsv").readLines()
            assert lines2_query == lines4

            // Error reports
            // Only error report for sampleP should have content to check`
            def error_report = path("$launchDir/results/locidex/merge/ref/MLST_error_report_4.csv").readLines()
            assert error_report.contains("sampleP,[\'sample1\'],sampleP ID and JSON key in sample1.mlst.json DO NOT MATCH. The 'sample1' key in sample1.mlst.json has been forcefully changed to 'sampleP': User should manually check input files to ensure correctness.")
            // Error report for query sampleP should be the same as the reference sample
            def error_report_query = path("$launchDir/results/locidex/merge/query/MLST_error_report_2.csv").readLines()
            assert error_report_query == error_report
        }
    }

    test("Testing for when there are repeat MLST allele files in multiple batches"){
        // Previous versions of the pipeline would fail if there were repeat MLST allele files in the samplesheet.
        tag "repeat-mlst"

        when{
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-samplename.csv"
                outdir = "results"
                batch_size = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check that the COPY_FILE process was called for the correct samples
            assert path("$launchDir/results/copy/sampleX_sample2_sample1.mlst.json").exists()
            assert !path("$launchDir/results/copy/sampleX_sample1.mlst.json").exists()
            assert !path("$launchDir/results/copy/sampleY_sample3.mlst.json").exists()
            assert !path("$launchDir/results/copy/sampleZ_sample4.mlst.json").exists()
            assert path("$launchDir/results/copy/sampleP_sample4.mlst.json").exists()

            // The merge_tsv file used in renaming the MLST profiles in locidex merge has the right file paths
            def merge_tsv_content = path("$launchDir/results/write/results.csv")
            assert merge_tsv_content.text.split('\n').any { line -> line ==~ /^sampleX_sample2.*\/sampleX_sample2_sample1\.mlst\.json$/} // The file path (minus the work directory)
            assert merge_tsv_content.text.split('\n').any { line -> line ==~ /^sampleP.*\/sampleP_sample4\.mlst\.json$/}

            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert processed_output_tsv.text.contains("sample1\tsampleX\tsample2\tsampleX_sample2\t0")
            assert processed_output_tsv.text.contains("sample1\tsampleX\tsample1\tsampleX\t0")
            assert processed_output_tsv.text.contains("sample1\tsampleX\tsample3\tsampleY\t1")
            assert processed_output_tsv.text.contains("sample1\tsampleX\tsample4\tsampleZ\t1")
            assert processed_output_tsv.text.contains("sample1\tsampleX\tsample5\tsampleP\t1")
        }
    }

    test("Testing for when there are repeat MLST allele files in one single batch"){
        // Previous versions of the pipeline would fail if there were repeat MLST allele files in the samplesheet.
        tag "repeat-mlst-single-batch"

        when{
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-samplename.csv"
                outdir = "results"
                batch_size = 10
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check that the COPY_FILE process was called for the correct samples
            assert path("$launchDir/results/copy/sampleX_sample2_sample1.mlst.json").exists()
            assert !path("$launchDir/results/copy/sampleX_sample1.mlst.json").exists()
            assert !path("$launchDir/results/copy/sampleY_sample3.mlst.json").exists()
            assert !path("$launchDir/results/copy/sampleZ_sample4.mlst.json").exists()
            assert path("$launchDir/results/copy/sampleP_sample4.mlst.json").exists()

            // The merge_tsv file used in renaming the MLST profiles in locidex merge has the right file paths
            def merge_tsv_content = path("$launchDir/results/write/results.csv")
            assert merge_tsv_content.text.split('\n').any { line -> line ==~ /^sampleX_sample2.*\/sampleX_sample2_sample1\.mlst\.json$/} // The file path (minus the work directory)
            assert merge_tsv_content.text.split('\n').any { line -> line ==~ /^sampleP.*\/sampleP_sample4\.mlst\.json$/}

            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert processed_output_tsv.text.contains("sample1\tsampleX\tsample2\tsampleX_sample2\t0")
            assert processed_output_tsv.text.contains("sample1\tsampleX\tsample1\tsampleX\t0")
            assert processed_output_tsv.text.contains("sample1\tsampleX\tsample3\tsampleY\t1")
            assert processed_output_tsv.text.contains("sample1\tsampleX\tsample4\tsampleZ\t1")
            assert processed_output_tsv.text.contains("sample1\tsampleX\tsample5\tsampleP\t1")
        }
    }

    test("Test that profile_dist doesn't generate distance for self-comparisons") {
        tag "self-comparison"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-selfaddress.csv"
                outdir = "results"

                pd_distm = "hamming"
                threshold = 1
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()


            // Check Processed Output
            def processed_output_tsv = path("$launchDir/results/process/results.tsv")
            assert processed_output_tsv.exists()
            def processed_output_xlsx = path("$launchDir/results/process/results.xlsx")
            assert processed_output_xlsx.exists()

            assert processed_output_tsv.text.contains("Query ID\tQuery Sample Name\tReference ID\tReference Sample Name\tDistance\tnew_isolates_date\tpredicted_primary_identification_name\tpredicted_primary_type_name\tgenomic_address_name\tnational_outbreak_code\tnational_outbreak_status\tprovisional_outbreak_code\trelated_specimen_primary_id")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample1\tsample1\t0")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample3\tsample3\t1")
            assert processed_output_tsv.text.contains("sample1\tsample1\tsample2\tsample2\t1")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample2\tsample2\t0") // No self-comparison for sample2 (which occured in profile_dist < 1.0.8)
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample3\tsample3\t1")
            assert processed_output_tsv.text.contains("sample2\tsample2\tsample1\tsample1\t1")

        }
    }

}
